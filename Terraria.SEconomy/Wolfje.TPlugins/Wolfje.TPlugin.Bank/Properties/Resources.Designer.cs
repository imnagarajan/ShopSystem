//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wolfje.Plugins.SEconomy.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Wolfje.Plugins.SEconomy.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BankAccounts collection
        ///
        ///This element holds all the bank accounts for a running server. Each BankAccount has a unique account number (starting from 1) and more attributes:
        ///
        ///* UserAccountName - The login name of the TShock account this bank account is linked to
        ///* WorldID - The WorldID that the account was created from, this is used when LockedToWorld is set and you want to lock bank accounts to worlds, otherwise they are static and are loaded in whichever world you create on the server.
        ///* Flags - A bit [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JournalBankAccountComment {
            get {
                return ResourceManager.GetString("JournalBankAccountComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the SEconomy transaction journal file. 
        ///
        ///You have probably guessed by now this is an XML format, this file persists all the transactions and bankaccounts in your server instance.  This file is not written to actively, all transaction processing is done in memory and coped out to disk every time the backup runs.
        ///
        ///Editing this file here isn&apos;t going to make your changes persist, once edited you will need to execute &quot;/bank loadjournal&quot; in the server console to resync the in-memory journal with this  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JournalRootComment {
            get {
                return ResourceManager.GetString("JournalRootComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transaction Collection
        ///
        ///This element holds all the transactions for the current running server.  Each transaction is double-entry accounted, which means that a transaction is essentially done twice, representing the loss of money on one account, and the gain of money in the destination account or vice-versa.
        ///
        ///A double-entry account journal must have two transactions; a source and a destination, and the amounts in each must be the inverse of eachother: If money is to be transferred away from a source acc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JournalTransactionComment {
            get {
                return ResourceManager.GetString("JournalTransactionComment", resourceCulture);
            }
        }
    }
}
